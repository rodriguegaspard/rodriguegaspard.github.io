---
title: 'A new direction with sandfall'
pubDate: 2025-04-09
description: 'Ditching quadtrees for now'
author: 'Rodrigue GASPARD'
tags: ["gaming", "programming", "physics"]
---

I didn't progress a lot with sandfall because I was focusing too much on [quadtrees](https://en.wikipedia.org/wiki/Quadtree). Using a data structure that performed binary space partitioning seemed ideal at first glance for a 2d particle simulator : most of the "universe" was going to be empty, and probably very heterogeneous most of the time (lots of particles at the bottom as they are affected by gravity, not much on the middle/top). In my mind, it would therefore make sense to *not* allocate a cell for every empty pixel on the screen, and instead only focus on each particle and its immediate surroundings.

But inserting, deleting and making sure the tree is balanced at all times is a bit of a pain, and compared to a fixed array, a lot less efficient (hard to beat O(1) after all.). For the sake of actually making something that works, I'm ditching quadtrees and instead using two fixed 1d arrays (index is equal to ```y * WIDTH + x```)
, one representing the current state of the simulation and the other representing [the *next* state of the simulation](https://en.wikipedia.org/wiki/Multiple_buffering). There's also two extras vectors of usize, stocking the indexes of active particles for each of the simulation states, so that I can avoid iterating over every cell.

<div style="position: relative; padding-top: 56.25%; height: 0;">
  <video src="videos/particle_falling.webm" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" autoplay muted loop playsinline></video>
</div>
